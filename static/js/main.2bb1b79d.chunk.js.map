{"version":3,"sources":["components/Weather.js","components/Places.js","App.js","serviceWorker.js","index.js"],"names":["Weather","console","log","concat","this","props","temperature1","temperature2","temperature3","temperature4","temperature5","react_default","a","createElement","className","city","country","humidity","error","Component","Places","state","search","value","style1","display","style2","backgroundColor","textColor","fontSize","button_style","e","setState","target","suggest","formatted_address","_this2","_this$state","react_google_maps_loader_es","params","key","libraries","render","googleMaps","style","react_google_places_suggest_es","autocompletionRequest","input","onSelectSuggest","handleSelectSuggest","bind","type","placeholder","onChange","handleInputChange","onClick","getWeather","React","API_KEY","App","undefined","chartData_temp","chartData_humid","_callee","city_name","api_call","data","api_call2","data2","regenerator_default","wrap","_context","prev","next","fetch","sent","json","_this","list","main","temp","name","sys","labels","datasets","label","stop","components_Places","components_Weather","es","width","height","options","maintainAspectRatio","title","text","legend","position","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bb1b79d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass Weather extends Component{\n    \n    \n    render()\n    {\n        console.log(`${this.props.temperature1}  ${this.props.temperature2} ${this.props.temperature3} ${this.props.temperature4} ${this.props.temperature5}`)\n        return(\n<div className=\"weather__info\">\n\t {\t\n\t \tthis.props.city && this.props.country && <p className=\"weather__key\"> Location: \n\t \t\t<span className=\"weather__value\"> { this.props.city }, { this.props.country }</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tthis.props.temperature1 && <p className=\"weather__key\"> Day1 temperature: \n\t \t\t<span className=\"weather__value\"> { this.props.temperature1 }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tthis.props.temperature2 && <p className=\"weather__key\"> Day2 temperature: \n\t \t\t<span className=\"weather__value\"> { this.props.temperature2 }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tthis.props.temperature3 && <p className=\"weather__key\"> Day3 temperature: \n\t \t\t<span className=\"weather__value\"> { this.props.temperature3 }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tthis.props.temperature4 && <p className=\"weather__key\"> Day4 temperature: \n\t \t\t<span className=\"weather__value\"> { this.props.temperature4 }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tthis.props.temperature5 && <p className=\"weather__key\"> Day5 temperature: \n\t \t\t<span className=\"weather__value\"> { this.props.temperature5 }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tthis.props.humidity && <p className=\"weather__key\"> Humidity: \n\t \t\t<span className=\"weather__value\"> { this.props.humidity } </span>\n\t \t</p> \n\t }\n\t { \n\t \tthis.props.error && <p className=\"weather__error\">{ this.props.error }</p>  \n     }\n     {/* {\n         this.props.humidity && this.props.temperature1 &&\n          this.props.temperature2 && this.props.temperature3 && this.props.temperature4 && \n          <Line \n            data= {this.state.data_chart}\n          />\n     } */}\n\t</div>\n        )\n\t\n\n    }\n}\n\nexport default Weather;","import React, {Component} from \"react\"\nimport GoogleMapLoader from \"react-google-maps-loader\"\nimport GooglePlacesSuggest from \"react-google-places-suggest\"\n\nconst API_KEY = \"AIzaSyDj8I9Bd0ICbhG9CpdYGOcCuc1VEfqqL0Y\" \n \n class Places extends React.Component {\n    state = {\n        search: \"\",\n        value: \"\",\n         style1 : {\n            display: 'inline-block',\n\n          },\n          style2:{\n                backgroundColor: '#282c34',\n                textColor:'White',\n                fontSize:'20px',\n                \n          },\n          button_style:{\n            fontSize:'20px',\n            display: 'inline-block',\n          }\n\n      }\n    \n      handleInputChange(e) {\n        this.setState({search: e.target.value, value: e.target.value})\n      }\n    \n      handleSelectSuggest(suggest) {\n        console.log(suggest)\n        this.setState({search: \"\", value: suggest.formatted_address})\n      }\n      \n      render() {\n        const {search, value} = this.state\n        return (\n            <div >\n          <GoogleMapLoader \n            params={{\n              key: API_KEY,\n              libraries: \"places,geocode\",\n            }}\n            render={googleMaps =>\n              googleMaps && (\n                <div style={this.state.style1}>\n                  <GooglePlacesSuggest\n                    autocompletionRequest={{input: search}}\n                    googleMaps={googleMaps}\n                    onSelectSuggest={this.handleSelectSuggest.bind(this)}\n                    \n                  >\n                    <input\n                      type=\"text\"\n                      style={this.state.style2}\n                      value={value}\n                      placeholder=\"Search a location\"\n                      onChange={this.handleInputChange.bind(this)} \n                    />\n                  </GooglePlacesSuggest>\n                </div>\n              )\n            }\n          />\n          <button style={this.state.button_style}type=\"submit\" onClick={()=>this.props.getWeather(this.state.value) }>Get Weather</button>\n          </div>\n        )\n      }\n}\n\nexport default Places;","import React from \"react\";\n\nimport Weather from \"./components/Weather\";\n\nimport { Bar } from \"react-chartjs-2\";\nimport Places from \"./components/Places\";\nimport './App.css'\n\nconst API_KEY = \"4b5126dfda5fcb96fcbafc4f132f73bc\";\n\nclass App extends React.Component {\n  // constructor()\n  // {\n  //   super()\n  // }\n  state = {\n    temperature1: undefined,\n    temperature2: undefined,\n    temperature3: undefined,\n    temperature4: undefined,\n    temperature5: undefined,\n    city: undefined,\n    humidity: undefined,\n    error: undefined,\n    chartData_temp:{},\n    chartData_humid:{}\n  }\n  // omponentWillMount(){\n  //   this.getChartData();\n  // }\n\n  // getChartData(){\n  //   // Ajax calls here\n  //   this.setState({\n  //     chartData : {\n  //       labels: [\"Day1\",\"Day2\",\"Day3\",\"Day4\",\"Day5\"],\n  //       datasets:[{\n  //           label: 'Temperature',\n  //           data:[\n  //             this.state.temperature1,\n  //             this.state.temperature2,\n  //             this.state.temperature3,\n  //             this.state.temperature4,\n  //             this.state.temperature5\n\n  //           ]\n  //       }\n  //       ],\n  //       backgroundColor:[\n  //           'rgba(255, 99, 132, 0.6)',\n  //     'rgba(54, 162, 235, 0.6)',\n  //     'rgba(255, 206, 86, 0.6)',\n  //     'rgba(75, 192, 192, 0.6)',\n  //     'rgba(153, 102, 255, 0.6)'\n\n  //       ]\n  //   }\n  //   });\n  // }\n  getWeather = async (city_name) => {\n    // e.preventDefault();\n    const city = city_name;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    const api_call2 = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`);\n    const data2 = await api_call2.json();\n    console.log(data2)\n  \n    if (city) {\n      this.setState({\n        temperature1: data2.list[0].main.temp,\n        temperature2: data2.list[8].main.temp,\n        temperature3: data2.list[16].main.temp,\n        temperature4: data2.list[24].main.temp,\n        temperature5: data2.list[32].main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data2.list[0].main.humidity,\n        error: \"\",\n        chartData_temp : {\n          labels: [\"Day1\",\"Day2\",\"Day3\",\"Day4\",\"Day5\"],\n          datasets:[{\n              label: 'Temperature',\n              data:[\n                // 1,2,3,4,5\n                data2.list[0].main.temp,\n                data2.list[8].main.temp,\n                data2.list[16].main.temp,\n                data2.list[24].main.temp,\n                data2.list[32].main.temp\n              ],\n              \n              backgroundColor:[\n                'rgba(255, 99, 132, 0.6)',\n          'rgba(54, 162, 235, 0.6)',\n          'rgba(255, 206, 86, 0.6)',\n          'rgba(75, 192, 192, 0.6)',\n          'rgba(153, 102, 255, 0.6)'\n              ]\n    \n            \n          }\n          ]\n          \n      },\n      chartData_humid:{\n        labels: [\"Day1\",\"Day2\",\"Day3\",\"Day4\",\"Day5\"],\n          datasets:[{\n              label: 'Humidity',\n              data:[\n                // 1,2,3,4,5\n                data2.list[0].main.humidity,\n                data2.list[8].main.humidity,\n                data2.list[16].main.humidity,\n                data2.list[24].main.humidity,\n                data2.list[32].main.humidity,\n              ],\n              backgroundColor:[\n                'rgba(255, 99, 132, 0.6)',\n          'rgba(54, 162, 235, 0.6)',\n          'rgba(255, 206, 86, 0.6)',\n          'rgba(75, 192, 192, 0.6)',\n          'rgba(153, 102, 255, 0.6)'\n    \n            ]\n          }\n          ]\n          \n      }\n      });\n    } \n    else {\n      this.setState({\n        temperature1: undefined,\n    temperature2: undefined,\n    temperature3: undefined,\n    temperature4: undefined,\n    temperature5: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        error: \"Please enter correct values.\"\n      });\n    }\n    \n  }\n  //  data_chart = [\n  //   {\n  //     label: \"Temperature Variation\",\n  //     data: [{ x: 1, y: this.state.temperature1 }, { x: 2, y: this.state.temperature2 }, { x: 3, y: this.state.temperature3 }, { x: 4, y: this.state.temperature4 }]\n  //   },\n  //   {\n  //     label: \"Series 2\",\n  //     data: [{ x: 1, y: 10 }, { x: 2, y: 10 }, { x: 3, y: 10 }]\n  //   },\n  //   {\n  //     label: \"Series 3\",\n  //     data: [{ x: 1, y: 10 }, { x: 2, y: 10 }, { x: 3, y: 10 }]\n  //   }\n  // ];\n  render() {\n    return (\n      <div className=\"App-header\">\n        <h1>Weather App</h1>\n                  <Places getWeather={this.getWeather}/>\n                  {/* <City getWeather={this.getWeather} /> */}\n                  \n                  <Weather \n                    temperature1={this.state.temperature1} \n                    temperature2={this.state.temperature2}\n                    temperature3={this.state.temperature3}\n                    temperature4={this.state.temperature4}\n                    temperature5={this.state.temperature5}   \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    error={this.state.error}\n                  />\n                  {/* <p>{this.state.temperature1} {this.state.temperature2} {this.state.temperature3} {this.state.temperature4} {this.state.temperature5}</p> */}\n                  {this.state.chartData_temp&&this.state.temperature1&&\n                    <Bar \n                    data= {this.state.chartData_temp}\n                    width={50}\n                    height={20}\n                    options={{\n                      maintainAspectRatio: true,\n                      title:{\n                        display: true,\n                        text: `Temperature Variation in ${this.state.city}`\n                      },\n                      legend:{\n                        display:true,\n                        position: \"right\"\n      \n                      }\n                    }}\n                    />\n                  }\n                  <br />\n                  <br />\n                  {this.state.chartData_humid&&this.state.humidity&&\n                    <Bar \n                    data= {this.state.chartData_humid}\n                    width={50}\n                    height={20}\n                    options={{\n                      maintainAspectRatio: true,\n                      title:{\n                        display: true,\n                        text: `Humidity Variation in ${this.state.city}`\n                      },\n                      legend:{\n                        display:true,\n                        position: \"right\"\n      \n                      }\n                    }}\n                    />\n                  }\n        </div>\n                \n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}